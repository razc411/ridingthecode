PseudoCode and Planning
===========================================================================
Client
Draw GUI -> Client Selected -> Choose data file to send -> Open TCP or UDP connection -> Send data

Server
Draw GUI -> Server Selected -> Choose connection type -> Set to TCP or UDP connecton -> 
Listen for connections -> Connect with client when found -> Read data -> Save Data -> Display the data -> Display statistics

Program = Single Threaded

Required Features
-LAN Comm
-Statistics
-File transfer
-User chosen file size and connection settings
-Client and Server mode
-GUI
-Ability to specifiy amount of times packet is sent

Required Documents
-Planning, Design, Pseudocode and testing
-Technical report
-Source code and executable

++++++++++++
+PseudoCode+
++++++++++++
Idle - WndProc and Window Registering
On Socket Event
	accept user
	or
	read data
On Client Send Data
	send_data()
On Client Mode Select
	init_client()
On Server Mode select
	init_server()
On Paint
	retrieve net_stats() from classlong data and paint
------------------------------------------
init_client()
	
	create connection
------------------------------------------
connect_client()

	establish connection with TCP server
------------------------------------------
send_tcp_data()
	
	data = select_data()
	data += grab_header()
	send data to specified address
	if data reaches location
		print successful transfer
	else 
		print failure to send data
	print network stats
	
------------------------------------------
select_data()
	
	file select dialog appears
	request IP and port info
	return a net_send struct containing address info and data descriptor
------------------------------------------
init_server
	
	create connection
	set wsasync event for read
	
	while(user has not canceled mode)
		if(recieve event is detected)
			recieve_data()

	exit thread, return to idle
------------------------------------------
recieve_tcp_data
	
	read data from socket
	package data
	if read fails
		print error
	if read succeds
		print success, call save_data()
	print network stats

	return to init server
------------------------------------------
save_data()

	take data and save to setting specified location
------------------------------------------
recieve_udp_data
	
	read data from socket
	send ack

	package data
	if read fails
		print error
	if read succeds
		print success, call save_data()
	print network stats

	return to init server
------------------------------------------
send_udp_data()
	
	data = select_data()
	data += grab_header()

	while(ack hasn't been received)
		send data to specified address

	if data reaches location
		print successful transfer
	else 
		print failure to send data
	print network stats
	
------------------------------------------
	


